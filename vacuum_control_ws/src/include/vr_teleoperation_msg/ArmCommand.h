// Generated by gencpp from file vr_teleoperation_msg/ArmCommand.msg
// DO NOT EDIT!


#ifndef VR_TELEOPERATION_MSG_MESSAGE_ARMCOMMAND_H
#define VR_TELEOPERATION_MSG_MESSAGE_ARMCOMMAND_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Transform.h>

namespace vr_teleoperation_msg
{
template <class ContainerAllocator>
struct ArmCommand_
{
  typedef ArmCommand_<ContainerAllocator> Type;

  ArmCommand_()
    : header()
    , start(false)
    , end(false)
    , joint_command()
    , transform()
    , gripper_pos(0.0)  {
    }
  ArmCommand_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , start(false)
    , end(false)
    , joint_command(_alloc)
    , transform(_alloc)
    , gripper_pos(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _start_type;
  _start_type start;

   typedef uint8_t _end_type;
  _end_type end;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _joint_command_type;
  _joint_command_type joint_command;

   typedef  ::geometry_msgs::Transform_<ContainerAllocator>  _transform_type;
  _transform_type transform;

   typedef double _gripper_pos_type;
  _gripper_pos_type gripper_pos;





  typedef boost::shared_ptr< ::vr_teleoperation_msg::ArmCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vr_teleoperation_msg::ArmCommand_<ContainerAllocator> const> ConstPtr;

}; // struct ArmCommand_

typedef ::vr_teleoperation_msg::ArmCommand_<std::allocator<void> > ArmCommand;

typedef boost::shared_ptr< ::vr_teleoperation_msg::ArmCommand > ArmCommandPtr;
typedef boost::shared_ptr< ::vr_teleoperation_msg::ArmCommand const> ArmCommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vr_teleoperation_msg::ArmCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vr_teleoperation_msg::ArmCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::vr_teleoperation_msg::ArmCommand_<ContainerAllocator1> & lhs, const ::vr_teleoperation_msg::ArmCommand_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.start == rhs.start &&
    lhs.end == rhs.end &&
    lhs.joint_command == rhs.joint_command &&
    lhs.transform == rhs.transform &&
    lhs.gripper_pos == rhs.gripper_pos;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::vr_teleoperation_msg::ArmCommand_<ContainerAllocator1> & lhs, const ::vr_teleoperation_msg::ArmCommand_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace vr_teleoperation_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::vr_teleoperation_msg::ArmCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vr_teleoperation_msg::ArmCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vr_teleoperation_msg::ArmCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vr_teleoperation_msg::ArmCommand_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vr_teleoperation_msg::ArmCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vr_teleoperation_msg::ArmCommand_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vr_teleoperation_msg::ArmCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e4e14e0450c91bc3d9a459a6e2d43ed8";
  }

  static const char* value(const ::vr_teleoperation_msg::ArmCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe4e14e0450c91bc3ULL;
  static const uint64_t static_value2 = 0xd9a459a6e2d43ed8ULL;
};

template<class ContainerAllocator>
struct DataType< ::vr_teleoperation_msg::ArmCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vr_teleoperation_msg/ArmCommand";
  }

  static const char* value(const ::vr_teleoperation_msg::ArmCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vr_teleoperation_msg::ArmCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ArmCommand\n"
"std_msgs/Header header\n"
"bool start\n"
"bool end\n"
"float64[] joint_command\n"
"geometry_msgs/Transform transform\n"
"float64 gripper_pos\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Transform\n"
"# This represents the transform between two coordinate frames in free space.\n"
"\n"
"Vector3 translation\n"
"Quaternion rotation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::vr_teleoperation_msg::ArmCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vr_teleoperation_msg::ArmCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.start);
      stream.next(m.end);
      stream.next(m.joint_command);
      stream.next(m.transform);
      stream.next(m.gripper_pos);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ArmCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vr_teleoperation_msg::ArmCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vr_teleoperation_msg::ArmCommand_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "start: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.start);
    s << indent << "end: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.end);
    s << indent << "joint_command[]" << std::endl;
    for (size_t i = 0; i < v.joint_command.size(); ++i)
    {
      s << indent << "  joint_command[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.joint_command[i]);
    }
    s << indent << "transform: ";
    s << std::endl;
    Printer< ::geometry_msgs::Transform_<ContainerAllocator> >::stream(s, indent + "  ", v.transform);
    s << indent << "gripper_pos: ";
    Printer<double>::stream(s, indent + "  ", v.gripper_pos);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VR_TELEOPERATION_MSG_MESSAGE_ARMCOMMAND_H
