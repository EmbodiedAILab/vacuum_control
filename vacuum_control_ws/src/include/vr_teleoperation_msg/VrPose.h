// Generated by gencpp from file vr_teleoperation_msg/VrPose.msg
// DO NOT EDIT!


#ifndef VR_TELEOPERATION_MSG_MESSAGE_VRPOSE_H
#define VR_TELEOPERATION_MSG_MESSAGE_VRPOSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace vr_teleoperation_msg
{
template <class ContainerAllocator>
struct VrPose_
{
  typedef VrPose_<ContainerAllocator> Type;

  VrPose_()
    : header()
    , power(false)
    , head_position()
    , head_quaternion()
    , left_position()
    , left_quaternion()
    , left_gripper_close(false)
    , right_position()
    , right_quaternion()
    , right_gripper_close(false)
    , left_j4j6_cmd()
    , right_j4j6_cmd()
    , left_disconnect_pressed(false)
    , right_disconnect_pressed(false)
    , control_mode(0)
    , waist_right(false)
    , waist_left(false)
    , tilt_forward(false)
    , tilt_backward(false)
    , torso_up(false)
    , torso_down(false)
    , x_vel(0.0)
    , y_vel(0.0)
    , angular_vel(0.0)
    , breakpoint(false)
    , exception(false)  {
    }
  VrPose_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , power(false)
    , head_position(_alloc)
    , head_quaternion(_alloc)
    , left_position(_alloc)
    , left_quaternion(_alloc)
    , left_gripper_close(false)
    , right_position(_alloc)
    , right_quaternion(_alloc)
    , right_gripper_close(false)
    , left_j4j6_cmd(_alloc)
    , right_j4j6_cmd(_alloc)
    , left_disconnect_pressed(false)
    , right_disconnect_pressed(false)
    , control_mode(0)
    , waist_right(false)
    , waist_left(false)
    , tilt_forward(false)
    , tilt_backward(false)
    , torso_up(false)
    , torso_down(false)
    , x_vel(0.0)
    , y_vel(0.0)
    , angular_vel(0.0)
    , breakpoint(false)
    , exception(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _power_type;
  _power_type power;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _head_position_type;
  _head_position_type head_position;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _head_quaternion_type;
  _head_quaternion_type head_quaternion;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _left_position_type;
  _left_position_type left_position;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _left_quaternion_type;
  _left_quaternion_type left_quaternion;

   typedef uint8_t _left_gripper_close_type;
  _left_gripper_close_type left_gripper_close;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _right_position_type;
  _right_position_type right_position;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _right_quaternion_type;
  _right_quaternion_type right_quaternion;

   typedef uint8_t _right_gripper_close_type;
  _right_gripper_close_type right_gripper_close;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _left_j4j6_cmd_type;
  _left_j4j6_cmd_type left_j4j6_cmd;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _right_j4j6_cmd_type;
  _right_j4j6_cmd_type right_j4j6_cmd;

   typedef uint8_t _left_disconnect_pressed_type;
  _left_disconnect_pressed_type left_disconnect_pressed;

   typedef uint8_t _right_disconnect_pressed_type;
  _right_disconnect_pressed_type right_disconnect_pressed;

   typedef int8_t _control_mode_type;
  _control_mode_type control_mode;

   typedef uint8_t _waist_right_type;
  _waist_right_type waist_right;

   typedef uint8_t _waist_left_type;
  _waist_left_type waist_left;

   typedef uint8_t _tilt_forward_type;
  _tilt_forward_type tilt_forward;

   typedef uint8_t _tilt_backward_type;
  _tilt_backward_type tilt_backward;

   typedef uint8_t _torso_up_type;
  _torso_up_type torso_up;

   typedef uint8_t _torso_down_type;
  _torso_down_type torso_down;

   typedef float _x_vel_type;
  _x_vel_type x_vel;

   typedef float _y_vel_type;
  _y_vel_type y_vel;

   typedef float _angular_vel_type;
  _angular_vel_type angular_vel;

   typedef uint8_t _breakpoint_type;
  _breakpoint_type breakpoint;

   typedef uint8_t _exception_type;
  _exception_type exception;





  typedef boost::shared_ptr< ::vr_teleoperation_msg::VrPose_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vr_teleoperation_msg::VrPose_<ContainerAllocator> const> ConstPtr;

}; // struct VrPose_

typedef ::vr_teleoperation_msg::VrPose_<std::allocator<void> > VrPose;

typedef boost::shared_ptr< ::vr_teleoperation_msg::VrPose > VrPosePtr;
typedef boost::shared_ptr< ::vr_teleoperation_msg::VrPose const> VrPoseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vr_teleoperation_msg::VrPose_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vr_teleoperation_msg::VrPose_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::vr_teleoperation_msg::VrPose_<ContainerAllocator1> & lhs, const ::vr_teleoperation_msg::VrPose_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.power == rhs.power &&
    lhs.head_position == rhs.head_position &&
    lhs.head_quaternion == rhs.head_quaternion &&
    lhs.left_position == rhs.left_position &&
    lhs.left_quaternion == rhs.left_quaternion &&
    lhs.left_gripper_close == rhs.left_gripper_close &&
    lhs.right_position == rhs.right_position &&
    lhs.right_quaternion == rhs.right_quaternion &&
    lhs.right_gripper_close == rhs.right_gripper_close &&
    lhs.left_j4j6_cmd == rhs.left_j4j6_cmd &&
    lhs.right_j4j6_cmd == rhs.right_j4j6_cmd &&
    lhs.left_disconnect_pressed == rhs.left_disconnect_pressed &&
    lhs.right_disconnect_pressed == rhs.right_disconnect_pressed &&
    lhs.control_mode == rhs.control_mode &&
    lhs.waist_right == rhs.waist_right &&
    lhs.waist_left == rhs.waist_left &&
    lhs.tilt_forward == rhs.tilt_forward &&
    lhs.tilt_backward == rhs.tilt_backward &&
    lhs.torso_up == rhs.torso_up &&
    lhs.torso_down == rhs.torso_down &&
    lhs.x_vel == rhs.x_vel &&
    lhs.y_vel == rhs.y_vel &&
    lhs.angular_vel == rhs.angular_vel &&
    lhs.breakpoint == rhs.breakpoint &&
    lhs.exception == rhs.exception;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::vr_teleoperation_msg::VrPose_<ContainerAllocator1> & lhs, const ::vr_teleoperation_msg::VrPose_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace vr_teleoperation_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::vr_teleoperation_msg::VrPose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vr_teleoperation_msg::VrPose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vr_teleoperation_msg::VrPose_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vr_teleoperation_msg::VrPose_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vr_teleoperation_msg::VrPose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vr_teleoperation_msg::VrPose_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vr_teleoperation_msg::VrPose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1bd9354d9b2cf947351aefbae463cef7";
  }

  static const char* value(const ::vr_teleoperation_msg::VrPose_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1bd9354d9b2cf947ULL;
  static const uint64_t static_value2 = 0x351aefbae463cef7ULL;
};

template<class ContainerAllocator>
struct DataType< ::vr_teleoperation_msg::VrPose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vr_teleoperation_msg/VrPose";
  }

  static const char* value(const ::vr_teleoperation_msg::VrPose_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vr_teleoperation_msg::VrPose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# VrPose\n"
"std_msgs/Header header\n"
"bool power\n"
"float32[] head_position\n"
"float32[] head_quaternion\n"
"float32[] left_position\n"
"float32[] left_quaternion\n"
"bool left_gripper_close\n"
"float32[] right_position\n"
"float32[] right_quaternion\n"
"bool right_gripper_close\n"
"float32[] left_j4j6_cmd\n"
"float32[] right_j4j6_cmd\n"
"bool left_disconnect_pressed\n"
"bool right_disconnect_pressed\n"
"int8 control_mode\n"
"bool waist_right\n"
"bool waist_left\n"
"bool tilt_forward\n"
"bool tilt_backward\n"
"bool torso_up\n"
"bool torso_down\n"
"float32 x_vel\n"
"float32 y_vel\n"
"float32 angular_vel\n"
"bool breakpoint\n"
"bool exception\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::vr_teleoperation_msg::VrPose_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vr_teleoperation_msg::VrPose_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.power);
      stream.next(m.head_position);
      stream.next(m.head_quaternion);
      stream.next(m.left_position);
      stream.next(m.left_quaternion);
      stream.next(m.left_gripper_close);
      stream.next(m.right_position);
      stream.next(m.right_quaternion);
      stream.next(m.right_gripper_close);
      stream.next(m.left_j4j6_cmd);
      stream.next(m.right_j4j6_cmd);
      stream.next(m.left_disconnect_pressed);
      stream.next(m.right_disconnect_pressed);
      stream.next(m.control_mode);
      stream.next(m.waist_right);
      stream.next(m.waist_left);
      stream.next(m.tilt_forward);
      stream.next(m.tilt_backward);
      stream.next(m.torso_up);
      stream.next(m.torso_down);
      stream.next(m.x_vel);
      stream.next(m.y_vel);
      stream.next(m.angular_vel);
      stream.next(m.breakpoint);
      stream.next(m.exception);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VrPose_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vr_teleoperation_msg::VrPose_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vr_teleoperation_msg::VrPose_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "power: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.power);
    s << indent << "head_position[]" << std::endl;
    for (size_t i = 0; i < v.head_position.size(); ++i)
    {
      s << indent << "  head_position[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.head_position[i]);
    }
    s << indent << "head_quaternion[]" << std::endl;
    for (size_t i = 0; i < v.head_quaternion.size(); ++i)
    {
      s << indent << "  head_quaternion[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.head_quaternion[i]);
    }
    s << indent << "left_position[]" << std::endl;
    for (size_t i = 0; i < v.left_position.size(); ++i)
    {
      s << indent << "  left_position[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.left_position[i]);
    }
    s << indent << "left_quaternion[]" << std::endl;
    for (size_t i = 0; i < v.left_quaternion.size(); ++i)
    {
      s << indent << "  left_quaternion[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.left_quaternion[i]);
    }
    s << indent << "left_gripper_close: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.left_gripper_close);
    s << indent << "right_position[]" << std::endl;
    for (size_t i = 0; i < v.right_position.size(); ++i)
    {
      s << indent << "  right_position[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.right_position[i]);
    }
    s << indent << "right_quaternion[]" << std::endl;
    for (size_t i = 0; i < v.right_quaternion.size(); ++i)
    {
      s << indent << "  right_quaternion[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.right_quaternion[i]);
    }
    s << indent << "right_gripper_close: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.right_gripper_close);
    s << indent << "left_j4j6_cmd[]" << std::endl;
    for (size_t i = 0; i < v.left_j4j6_cmd.size(); ++i)
    {
      s << indent << "  left_j4j6_cmd[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.left_j4j6_cmd[i]);
    }
    s << indent << "right_j4j6_cmd[]" << std::endl;
    for (size_t i = 0; i < v.right_j4j6_cmd.size(); ++i)
    {
      s << indent << "  right_j4j6_cmd[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.right_j4j6_cmd[i]);
    }
    s << indent << "left_disconnect_pressed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.left_disconnect_pressed);
    s << indent << "right_disconnect_pressed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.right_disconnect_pressed);
    s << indent << "control_mode: ";
    Printer<int8_t>::stream(s, indent + "  ", v.control_mode);
    s << indent << "waist_right: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.waist_right);
    s << indent << "waist_left: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.waist_left);
    s << indent << "tilt_forward: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.tilt_forward);
    s << indent << "tilt_backward: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.tilt_backward);
    s << indent << "torso_up: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.torso_up);
    s << indent << "torso_down: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.torso_down);
    s << indent << "x_vel: ";
    Printer<float>::stream(s, indent + "  ", v.x_vel);
    s << indent << "y_vel: ";
    Printer<float>::stream(s, indent + "  ", v.y_vel);
    s << indent << "angular_vel: ";
    Printer<float>::stream(s, indent + "  ", v.angular_vel);
    s << indent << "breakpoint: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.breakpoint);
    s << indent << "exception: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.exception);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VR_TELEOPERATION_MSG_MESSAGE_VRPOSE_H
